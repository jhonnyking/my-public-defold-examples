
// Positions can be world or local space, since world and normal
// matrices are identity for world vertex space materials.
// If world vertex space is selected, you can remove the
// normal matrix multiplication for optimal performance.

attribute mediump vec4 position;
attribute mediump vec2 texcoord0;
attribute mediump vec3 normal;

uniform mediump mat4 mtx_worldview;
uniform mediump mat4 mtx_view;
uniform mediump mat4 mtx_world;
uniform mediump mat4 mtx_proj;
uniform mediump mat4 mtx_normal;
varying mediump vec4 var_light;

uniform mediump vec4 camera_mvp_mvp0;
uniform mediump vec4 camera_mvp_mvp1;
uniform mediump vec4 camera_mvp_mvp2;
uniform mediump vec4 camera_mvp_mvp3;

uniform mediump vec4 mtx_light_0_mvp0;
uniform mediump vec4 mtx_light_0_mvp1;
uniform mediump vec4 mtx_light_0_mvp2;
uniform mediump vec4 mtx_light_0_mvp3;

uniform mediump vec4 mtx_light_1_mvp0;
uniform mediump vec4 mtx_light_1_mvp1;
uniform mediump vec4 mtx_light_1_mvp2;
uniform mediump vec4 mtx_light_1_mvp3;

uniform mediump vec4 mtx_light_2_mvp0;
uniform mediump vec4 mtx_light_2_mvp1;
uniform mediump vec4 mtx_light_2_mvp2;
uniform mediump vec4 mtx_light_2_mvp3;

varying mediump vec4 var_position;
varying mediump vec4 var_position_clip;
varying mediump vec3 var_normal;
varying mediump vec2 var_texcoord0;
varying mediump vec4 var_texcoord0_shadow[3];

mat4 get_matrix(vec4 c0, vec4 c1, vec4 c2, vec4 c3)
{
    return mat4(c0,c1,c2,c3);
}

void main()
{
    mat4 camera_mvp      = get_matrix(camera_mvp_mvp0,camera_mvp_mvp1,camera_mvp_mvp2,camera_mvp_mvp3);
    
    vec4 p               = mtx_worldview * vec4(position.xyz, 1.0);
    vec4 p_w             = mtx_world * vec4(position.xyz, 1.0);

    var_light            = vec4(0.0);
    var_position         = p;
    var_texcoord0        = texcoord0;
    var_normal           = normalize((mtx_normal * vec4(normal, 0.0)).xyz);

    var_texcoord0_shadow[0] = get_matrix(mtx_light_0_mvp0, mtx_light_0_mvp1, mtx_light_0_mvp2, mtx_light_0_mvp3) * p_w;
    var_texcoord0_shadow[1] = get_matrix(mtx_light_1_mvp0, mtx_light_1_mvp1, mtx_light_1_mvp2, mtx_light_1_mvp3) * p_w;
    var_texcoord0_shadow[2] = get_matrix(mtx_light_2_mvp0, mtx_light_2_mvp1, mtx_light_2_mvp2, mtx_light_2_mvp3) * p_w;
    gl_Position             = mtx_proj * p;

    var_position_clip = camera_mvp * p_w;
}

