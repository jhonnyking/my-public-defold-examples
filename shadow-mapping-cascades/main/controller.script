
-- Translates a matrix in-place
local function translate_matrix(mat,pos)
	mat.m03 = mat.m03 + pos.x
	mat.m13 = mat.m13 + pos.y
	mat.m23 = mat.m23 + pos.z
	return mat
end

local function get_rotation_from_yaw_pitch(yaw,pitch)
	return vmath.quat_rotation_x(math.rad(pitch)) * vmath.quat_rotation_y(math.rad(yaw))
end

-- Calculates a view matrix from euler degrees
local function get_matrix_from_rot_zoom(quat,zoom)
	local mat = vmath.matrix4_from_quat(quat)
	return translate_matrix(mat,vmath.vector3(0,0,-zoom))
end

function init(self)
	self.view  = { x = 0, y = 0, w = 1, h = 1, transform = vmath.matrix4() }

	self.yaw   = 90
	self.pitch = 0
	self.zoom  = 30

	self.yaw_debug   = 0
	self.pitch_debug = 0
	self.zoom_debug  = 30

	self.yaw_light   = -30
	self.pitch_light = 60
		
	self.time  = 0

	self.camera = -1
	self.light_vector         = get_rotation_from_yaw_pitch(self.yaw_light, self.pitch_light)
	self.view.transform_debug = get_matrix_from_rot_zoom(get_rotation_from_yaw_pitch(self.yaw_debug,self.pitch_debug), self.zoom_debug)
	self.view.transform       = get_matrix_from_rot_zoom(get_rotation_from_yaw_pitch(self.yaw,self.pitch), self.zoom)

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "set_light_direction",  { direction = self.light_vector })
	msg.post("@render:", "set_near_far",         { near = 0.1, far = 150 })
	msg.post("@render:", "set_camera_id",        { camera = self.camera })
	msg.post("@render:", "set_view",               self.view)
end

function update_debug(self)
	if self.frustum_debug then
		if not self.did_create_spheres then
			self.did_create_spheres = 1
			self.frustum_spheres = {}

			for i = 1, #self.frustum_debug.points do
				for j = 1, 8 do
					table.insert(self.frustum_spheres, factory.create("/factories#frustum_sphere"))
				end
			end

			for i = 1, #self.frustum_debug.positions do
				table.insert(self.frustum_spheres, factory.create("/factories#frustum_cube"))
			end

			for i = 1, #self.frustum_debug.centers do
				table.insert(self.frustum_spheres, factory.create("/factories#frustum_cube"))
			end
		end

		-- debug
		local debug_colors = {
			vmath.vector4(1,0,0,1),
			vmath.vector4(0,1,0,1),
			vmath.vector4(0,0,1,1)
		}
		local sphere_i = 1
		for f, v in pairs(self.frustum_debug.points) do
			local line_start = {}
			for c, p in pairs(v) do
				local p_set = vmath.vector3(p.x,p.y,p.z)
				go.set_position(p_set, self.frustum_spheres[sphere_i])
				sphere_i = sphere_i + 1

				if c < 5 then
					line_start[c] = p_set
				else
					msg.post("@render:", "draw_line", {start_point = line_start[c-4], end_point = p_set, color = debug_colors[f]})

					local p_0 = p_set
					local p_1 = nil

					if c < 8 then
						p_1 = vmath.vector3(v[c+1].x,v[c+1].y,v[c+1].z)
					else
						p_1 = vmath.vector3(v[5].x,v[5].y,v[5].z)
					end

					msg.post("@render:", "draw_line", {start_point = p_0, end_point = p_1, color = debug_colors[f]})
				end 
			end
		end

		for k, p in pairs(self.frustum_debug.centers) do
			local fp = vmath.vector3(p.x,p.y,p.z)
			go.set_position(fp, self.frustum_spheres[sphere_i])
			sphere_i = sphere_i + 1
		end
	end
end

function update(self, dt)
	self.time = self.time + dt
	
	-- Update camera
	if self.camera == 1 then
		self.view.transform_debug = get_matrix_from_rot_zoom(get_rotation_from_yaw_pitch(self.yaw_debug,self.pitch_debug), self.zoom_debug)
	else
		self.view.transform = get_matrix_from_rot_zoom(get_rotation_from_yaw_pitch(self.yaw,self.pitch), self.zoom)
	end
	
	msg.post("@render:", "set_view", self.view)

	-- Update scene
	local pos        = go.get_position("/shadow_sphere")
	local pos_offset = 10
	pos.x = math.sin(self.time) * pos_offset
	pos.z = math.cos(self.time) * pos_offset
	go.set_position(pos,"/shadow_sphere")

	update_debug(self)
end

function on_input_handle_light(self, action_id, action)
	if action_id == hash("M_LEFT") then
		self.yaw_light    = self.yaw_light + action.dx
		self.pitch_light  = self.pitch_light - action.dy
		self.light_vector = get_rotation_from_yaw_pitch(self.yaw_light, self.pitch_light)
		msg.post("@render:", "set_light_direction",  { direction = self.light_vector })
	end
end

function on_input_handle_camera(self, action_id, action)
	if action_id == hash("M_LEFT") then
		if self.camera == 1 then
			self.yaw_debug = self.yaw_debug + action.dx
			self.pitch_debug = self.pitch_debug - action.dy
		else
			self.yaw = self.yaw + action.dx
			self.pitch = self.pitch - action.dy
		end
	elseif action_id == hash("M_RIGHT") then
		if self.camera == 1 then
			self.zoom_debug = self.zoom_debug + action.dy * 0.1
		else
			self.zoom = self.zoom + action.dy * 0.1
		end
	elseif action_id == hash("M_CHANGE_CAMERA") and action.pressed then
		self.camera = -self.camera
		msg.post("@render:", "set_camera_id", { camera = self.camera })
	end
end

function on_input(self, action_id, action)

	if action_id == hash("M_MOVE_LIGHT") then
		if action.pressed then
			self.do_move_light = true
		elseif action.released then
			self.do_move_light = false
		end
	end

	if self.do_move_light then
		on_input_handle_light(self, action_id, action)
	else
		on_input_handle_camera(self, action_id, action)
	end
end

function on_message(self, message_id, message)
	if message_id == hash("frustum_debug") then
		self.frustum_debug = message
	end
end