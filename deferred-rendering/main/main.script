function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	self.debug_mode  = 1
	self.debug_modes = {
		{"default"},
		{"light_volumes"},
		{"light_only"},
		{"no_light"}
	}

	self.lights = {}
	self.time = 0
	
	local num_lights = 256

	math.randomseed(socket.gettime()*10000)
	for i = 1, num_lights do
		local radius    = math.random(2, 10)
		local light     = {}
		local light_pos = vmath.vector3(math.random(-18, 18), math.random(0, 4), math.random(-18, 18))
		local light_col = vmath.vector4(math.random(), math.random(), math.random(), 0)
		local light_rad = vmath.vector3(radius, radius, radius)
		local light     = factory.create("/main#point_light_factory", light_pos)
		local light_url = msg.url(nil, light, "light")

		go.set(light_url, "light_color", light_col)
		go.set_scale(light_rad, light)
	end
end

function update(self, dt)
	for k, v in pairs(self.lights) do
		local l_x = v.pos.x + math.sin(self.time * v.speed * v.dir) * v.radius
		local l_z = v.pos.z + math.cos(self.time * v.speed * v.dir) * v.radius
		local l_p = vmath.vector3(l_x, v.pos.y, l_z)
		go.set_position(l_p, v.go)
	end
	self.time = self.time + dt
end

function on_input(self, action_id, action)
	if action_id == hash("on_space") and action.pressed then
		self.debug_mode = self.debug_mode + 1

		if self.debug_mode > #self.debug_modes then
			self.debug_mode = 1
		end

		msg.post("@render:", "debug_mode", { debug_mode = self.debug_mode })
	end
end

function on_message(self, message_id, message)
	if message_id == hash("add_light") then
		local light = {}
		light.radius = math.random(1, 10)
		light.speed  = math.random(0.75, 2.0)
		light.pos    = go.get_position(message.id)
		light.dir    = math.random(-1, 1)
		light.go     = message.id

		if light.dir > 0 then
			light.dir = 1
		else
			light.dir = -1
		end

		table.insert(self.lights, light)
	end
end


