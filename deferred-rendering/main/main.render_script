--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

DEBUG_MODE_DEFAULT = 1
DEBUG_MODE_LIGHT_VOLUMES = 2
DEBUG_MODE_LIGHT_ONLY = 3
DEBUG_MODE_NO_LIGHT = 4

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.light_pred = render.predicate({"light"})
    self.composite_pred = render.predicate({"composite"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 1)

    self.debug_mode = DEBUG_MODE_DEFAULT

    self.view = vmath.matrix4()

    -- default is stretch projection. copy from builtins and change for different projection
    -- or send a message to the render script to change projection:
    -- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
    -- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
    -- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    self.near = -1
    self.far = 1
    self.projection_fn = stretch_projection

    local buffer_params_rgba32f = {
        format     = render.FORMAT_RGBA32F,
        width      = render.get_window_width(),
        height     = render.get_window_height(),
        min_filter = render.FILTER_LINEAR,
        mag_filter = render.FILTER_LINEAR,
        u_wrap     = render.WRAP_CLAMP_TO_EDGE,
        v_wrap     = render.WRAP_CLAMP_TO_EDGE
    }

    local buffer_params_rgba8 = {
        format     = render.FORMAT_RGBA,
        width      = render.get_window_width(),
        height     = render.get_window_height(),
        min_filter = render.FILTER_LINEAR,
        mag_filter = render.FILTER_LINEAR,
        u_wrap     = render.WRAP_CLAMP_TO_EDGE,
        v_wrap     = render.WRAP_CLAMP_TO_EDGE
    }
            
    local depth_params = {
        format = render.FORMAT_DEPTH,
        width  = render.get_window_width(),
        height = render.get_window_height(),
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }
    
    self.rt_gbuffer = render.render_target({
        [render.BUFFER_COLOR0_BIT] = buffer_params_rgba32f,
        [render.BUFFER_COLOR1_BIT] = buffer_params_rgba32f,
        [render.BUFFER_COLOR2_BIT] = buffer_params_rgba8,
        [render.BUFFER_DEPTH_BIT] = depth_params
    })

    self.constants = render.constant_buffer()
    self.constants.u_window_size = vmath.vector4()
end

function render_pass_gbuffer(self)
    render.set_render_target(self.rt_gbuffer)

    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0.1,0.1,0.1,1), [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    
    render.enable_material("render_pass_gbuffer_material")

    render.set_depth_mask(true)
    render.set_depth_func(render.COMPARE_FUNC_LEQUAL)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_BLEND)

    render.draw(self.model_pred)

    render.disable_material()
    render.set_render_target(render.RENDER_TARGET_DEFAULT)
end

function render_pass_models(self)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

    render.set_depth_mask(true)
    render.set_depth_func(render.COMPARE_FUNC_LEQUAL)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_BLEND)

    render.draw(self.model_pred)
end

function render_pass_lighting(self)
    self.constants.u_window_size = vmath.vector4(render.get_window_width(), render.get_window_height(), 0, 0)

    render.set_depth_mask(false)
    
    --render.set_cull_face(render.FACE_FRONT)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.enable_state(render.STATE_BLEND)

    render.set_blend_func(render.BLEND_ONE, render.BLEND_ONE)
    
    render.enable_texture(0, self.rt_gbuffer, render.BUFFER_COLOR0_BIT)
    render.enable_texture(1, self.rt_gbuffer, render.BUFFER_COLOR1_BIT)
    render.enable_texture(2, self.rt_gbuffer, render.BUFFER_COLOR2_BIT)
    
    render.draw(self.light_pred, { constants = self.constants })

    render.disable_texture(0)
    render.disable_texture(1)
    render.disable_texture(2)
    render.set_cull_face(render.FACE_BACK)

    render.set_depth_mask(true)
end

function render_pass_depth(self)
    render.set_depth_mask(true)
    render.set_color_mask(false, false, false, false)
    render.set_depth_func(render.COMPARE_FUNC_LEQUAL)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_BLEND)

    render.draw(self.model_pred)
    render.set_color_mask(true, true, true, true)
end

function render_pass_composite(self)
    render.set_depth_mask(false)
    render.enable_material("render_pass_composite_material")
    render.enable_texture(0, self.rt_gbuffer, render.BUFFER_COLOR2_BIT)
    render.enable_texture(1, self.rt_gbuffer, render.BUFFER_COLOR0_BIT)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    render.disable_state(render.STATE_BLEND)
    render.draw(self.composite_pred)
    render.disable_texture(0)
    render.disable_texture(1)
    render.disable_material()
end

function render_debug_lights(self)
    render.enable_material("render_pass_debug_lights")

    --render.set_cull_face(render.FACE_FRONT)
    render.set_cull_face(render.FACE_BACK)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_BLEND)
    --render.set_depth_func(render.COMPARE_FUNC_LESS)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

    --render.set_blend_func(render.BLEND_ONE, render.BLEND_ONE)
    
    render.draw(self.light_pred)
    
    render.disable_material()
    render.set_cull_face(render.FACE_BACK)
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(self.view)

    render.set_projection(get_projection(self))
    
    if self.debug_mode == DEBUG_MODE_DEFAULT then
        render_pass_gbuffer(self)
        render_pass_composite(self)
        render_pass_depth(self)
        render_pass_lighting(self)
    elseif self.debug_mode == DEBUG_MODE_LIGHT_VOLUMES then
        render_pass_gbuffer(self)
        render_pass_composite(self)
        render_pass_depth(self)
        render_pass_lighting(self)
        render_debug_lights(self)
    elseif self.debug_mode == DEBUG_MODE_LIGHT_ONLY then
        render_pass_depth(self)
        render_pass_lighting(self)
    elseif self.debug_mode == DEBUG_MODE_NO_LIGHT then
        render_pass_models(self)
    end

    -- debug rendering
    --
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    render.draw_debug3d()
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("debug_mode") then
        self.debug_mode = message.debug_mode
    end
end
